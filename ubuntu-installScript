#!/bin/bash
#------------------------------------------
#      Ubuntu asp.net InstallScript
#      copyright https://github.com/cjy37
#      email: rocky.cn@foxmail.com
#------------------------------------------

function showMenu()
{
	clear
	echo
	echo "--------------------------------------------------------------"
	echo "|      Ubuntu Install Helper                                 |"
	echo "|      copyright https://github.com/cjy37                    |"
	echo "--------------------------------------------------------------"
	echo "|      a. Install Web Server + MySQL [d,e,g,h,i,j]           |"
	echo "|      b. Install Web Server   [d,e,g,i,j]                   |"
	echo "|      c. Install MySQL    [d,h,j]                           |"
	echo "|      d. Install Libs     [Public Libs]                     |"
	echo "|      e. Install Mono for Last releases version             |"
	echo "|      f. Install Mono for Last version use git              |"
	echo "|      g. Install Jexus v5 (Mono Web Server)                 |"
	echo "|      h. Install Mysql v5.5 (MariaDB)                       |"
	echo "|      i. Install Haproxy                                    |"
	echo "|      j. Install Redis                                      |"
	echo "|      k. Install Node.js                                    |"
	echo "|      l. Install MQTT Server                                |"
	echo "|      m. Install MongoDB                                    |"
	echo "|      n. Install Nginx                                      |"
	echo "|      x. Exit                                               |"
	echo "--------------------------------------------------------------"
	echo
	return 0
}

function setupLibs()
{
	sudo apt-get update -y
	sudo apt-get upgrade -y

	echo "Install the public Libs"
	echo "------------------------------------"

	if [ ! -d /wwwroot/htdocs/www ]; then
	  mkdir -pv /wwwroot/htdocs/www
	fi

	if [ ! -d /tmp/downloads ]; then
	  mkdir -pv /tmp/downloads
	fi

	cd /tmp
	sudo apt-get install -y vim chkconfig
	sudo apt-get install -y build-essential
	sudo apt-get install -y automake autoconf
	sudo apt-get install -y bison gettext libtool libglib2.0-dev libfreetype6-dev libfontconfig-dev
	sudo apt-get install -y libgif-dev libtiff4-dev libpng12-dev libexif-dev libx11-dev libxft-dev libjpeg-dev
	sudo apt-get install -y mono-complete
        sudo apt-get install -y git
        setupLibgdiplus
	cd /tmp/downloads
	wget -c http://flex-ui-libs.googlecode.com/files/conf.zip
	if [ -f conf.zip ]; then
			unzip -o conf.zip
	fi

	return 0
}

function setupLibgdiplus()
{
	echo "install libgdiplus"
	echo "------------------------------------"
	cd /tmp/downloads
	wget -c http://download.mono-project.com/sources/libgdiplus/libgdiplus-2.10.9.tar.bz2
	
	if [ -f libgdiplus-2.10.9.tar.bz2 ]; then
		tar -jxvf libgdiplus-2.10.9.tar.bz2
		cd libgdiplus-2.10.9
		sudo ./configure --prefix=/usr
		sudo make && sudo make install
	fi
	sudo ldconfig
	sudo ldconfig -p |grep libgdiplus

	return 0
}

function setupNewMono()
{
	if [ ! -d /wwwroot/htdocs/www ]; then
	  mkdir -pv /wwwroot/htdocs/www
	fi
	if [ ! -d /tmp/downloads ]; then
	  mkdir -pv /tmp/downloads
	fi
	
	echo "Install mono for Last version use git"
	echo "------------------------------------"

	mkdir /tmp/mono-git-src
	cd /tmp/mono-git-src
	git clone git://github.com/mono/mono.git
	cd mono/
	sudo rm -Rf external/Lucene.Net/
	sudo git submodule init
	sudo git submodule update
	sudo ./autogen.sh --prefix=/usr
	sudo make
	sudo make install
	sudo ldconfig
	
	cd /tmp/downloads
	if [ -f aspx-info.tar.gz ]; then
	  tar xvf aspx-info.tar.gz
	  cd aspx-info
	  sudo cp -r -f index.aspx /wwwroot/htdocs/www/index.aspx
	fi
	
	return 0
}

function setupMono()
{
	if [ ! -d /wwwroot/htdocs/www ]; then
	  mkdir -pv /wwwroot/htdocs/www
	fi
	if [ ! -d /tmp/downloads ]; then
	  mkdir -pv /tmp/downloads
	fi
	
	echo "Install mono for Last releases version"
	echo "------------------------------------"

	cd /tmp/downloads
	wget -c http://flex-ui-libs.googlecode.com/files/aspx-info.tar.gz
	wget -c http://download.mono-project.com/sources/mono/mono-3.2.8.tar.bz2
	if [ -f mono-3.2.8.tar.bz2 ]; then
	  tar -vxf mono-3.2.8.tar.bz2
	  cd mono-3.2.8
	  sudo ./autogen.sh --prefix=/usr
	  sudo make
	  sudo make install
	  sudo ldconfig
	fi

	cd /tmp/downloads
	if [ -f aspx-info.tar.gz ]; then
	  tar xvf aspx-info.tar.gz
	  cd aspx-info
	  sudo cp -r -f index.aspx /wwwroot/htdocs/www/index.aspx
	fi

  return 0
}

function setupMysql()
{
	if [ ! -d /tmp/downloads ]; then
	  mkdir -pv /tmp/downloads
	fi

	echo "install mysql"
	echo "------------------------------------"

	#apt-install mysql
	sudo apt-get install -y python-software-properties
	sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xcbcb082a1bb943db
	sudo add-apt-repository 'deb http://mirror.stshosting.co.uk/mariadb/repo/5.5/ubuntu precise main'
	sudo apt-get update -y
	sudo apt-get install -y libmysqlclient18=5.5.32+maria-1~precise mysql-common=5.5.32+maria-1~precise
	sudo apt-get install -y mariadb-server mariadb-client
	sudo service mysql start
	return 0
}

function setupHaproxy()
{
	echo "install haproxy"
	echo "------------------------------------"

	sudo apt-get install -y haproxy
	sudo echo "ENABLED=1" > /etc/default/haproxy
	sudo service haproxy start
	
	return 0
}

function setupRedis()
{
	echo "install Redis"
	echo "------------------------------------"

	sudo apt-get install -y redis-server
	sudo service redis-server start
	
	return 0
}

function setupMongoDB()
{
	echo "install MongoDB"
	echo "------------------------------------"

	sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
	echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list
	sudo apt-get update -y
	sudo apt-get install -y mongodb-10gen
	sudo apt-get install -y mongodb-10gen=2.4.6
	echo "mongodb-10gen hold" | sudo dpkg --set-selections
	sudo service mongodb start
	#sudo apt-get install -y mongo
	#sudo apt-get update -y
}

function setupMQTTServer()
{
	echo "install mosquitto(MQTT Server)"
	echo "------------------------------------"

	sudo apt-add-repository ppa:mosquitto-dev/mosquitto-ppa
	sudo apt-get update -y
	sudo apt-get install -y python-software-properties
	sudo apt-get install -y mosquitto
	sudo cp /etc/mosquitto/mosquitto.conf.example /etc/mosquitto/mosquitto.conf
	sudo service mosquitto start
}

function setupNodeJS()
{
	echo "install Node.js"
	echo "------------------------------------"
	
	if [ ! -d /wwwroot ]; then
	  sudo mkdir -pv /wwwroot
	fi
	
	if [ ! -d /wwwroot/node_mqtt ]; then
	  sudo mkdir -pv /wwwroot/node_mqtt
	fi
	
	sudo apt-get install -y python-software-properties python g++ make
	sudo add-apt-repository ppa:chris-lea/node.js
	sudo apt-get update -y
	sudo apt-get install -y nodejs
	
	cd /wwwroot/node_mqtt
	
	sudo echo "sudo npm install forever/mqtt/websocket/websocket-server/socket.io to '/wwwroot/node_mqtt'"
	
	sudo npm install forever
	sudo npm install mqtt
	sudo npm install websocket
	sudo npm install websocket-server
	sudo npm install socket.io

	return 0
}

function setupNginx()
{
	sudo apt-add-repository ppa:nginx/development
	sudo apt-get update
	sudo apt-get install nginx
}


function setupJws()
{
	if [ ! -d /wwwroot/htdocs/www ]; then
	  sudo mkdir -pv /wwwroot/htdocs/www
	fi
	if [ ! -d /tmp/downloads ]; then
	  sudo mkdir -pv /tmp/downloads
	fi

	echo "install jexus"
	echo "------------------------------------"

	cd /tmp/downloads
	wget -c http://linuxdot.net/down/jexus-5.5.1.tar.gz
	if [ -f jexus-5.5.1.tar.gz ]; then
	  tar -xf jexus-5.5.1.tar.gz
	  cd jexus-5.5.1
	  sudo ./install
	  sudo chmod +x /usr/jexus/*
	  sudo /usr/jexus/jws start
	fi
	return 0
}

function selectCmd()
{
	alias cp='cp'
	showMenu
	echo "Please select a serial number for installation"
	echo "When your manual installation, Please install the [d] first:"
	echo "[f][g] be dependent on [e]:"
	read -n 1 M
	echo

	if [ "$M" = "x" ]; then
		exit 1
	elif [ "$M" = "a" ]; then
		echo "Installing ALL... [d,e,g,h,i,j]"
		echo "------------------------------------"
		setupLibs
		setupMono
		setupJws
		setupMysql
		setupHaproxy
		setupRedis
	elif [ "$M" = "b" ]; then
		echo "Installing Web Server ... [d,e,g,i,j]"
		echo "------------------------------------"
		setupLibs
		setupMono
		setupJws
		setupHaproxy
		setupRedis
	elif [ "$M" = "c" ]; then
		 echo "Installing MySQL ... [d,h,j]"
		 echo "------------------------------------"
		 setupLibs
		 setupMysql
		 setupRedis
	elif [ "$M" = "d" ]; then
		setupLibs
		read -n 1 -p "Press <Enter> to continue..."
	elif [ "$M" = "e" ]; then
		setupMono
		read -n 1 -p "Press <Enter> to continue..."
        elif [ "$M" = "f" ]; then
		setupNewMono
		read -n 1 -p "Press <Enter> to continue..."
	elif [ "$M" = "g" ]; then
		setupJws
		read -n 1 -p "Press <Enter> to continue..."
	elif [ "$M" = "h" ]; then
		setupMysql
		read -n 1 -p "Press <Enter> to continue..."
	elif [ "$M" = "i" ]; then
		setupHaproxy
		read -n 1 -p "Press <Enter> to continue..."
	elif [ "$M" = "j" ]; then
		setupRedis
		read -n 1 -p "Press <Enter> to continue..."
	elif [ "$M" = "k" ]; then
		setupNodeJS
		read -n 1 -p "Press <Enter> to continue..."
	elif [ "$M" = "l" ]; then
		setupMQTTServer
		read -n 1 -p "Press <Enter> to continue..."
	elif [ "$M" = "m" ]; then
		setupMongoDB
		read -n 1 -p "Press <Enter> to continue..."
	elif [ "$M" = "n" ]; then
		setupNginx
		read -n 1 -p "Press <Enter> to continue..."
	else
		echo "Select Error!"
		read -n 1 -p "Press <Enter> to continue..."
	fi

	selectCmd
	return 0
}
cd /tmp
selectCmd
