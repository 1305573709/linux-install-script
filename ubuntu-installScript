#!/bin/bash
#------------------------------------------
#      Ubuntu asp.net InstallScript
#      copyright https://github.com/cjy37
#      email: rocky.cn@foxmail.com
#------------------------------------------

function showMenu()
{
	clear
	echo
	echo "--------------------------------------------------------------"
	echo "|      Ubuntu Install Helper                                 |"
	echo "|      copyright https://github.com/cjy37                    |"
	echo "--------------------------------------------------------------"
	echo "|      a. Install Web Server + MySQL [d,e,g,h,i,j]           |"
	echo "|      b. Install Web Server   [d,e,g,i,j]                   |"
	echo "|      c. Install MySQL    [d,h,j]                           |"
	echo "|      d. Install Libs     [Public Libs]                     |"
	echo "|      e. Install Mono (Last releases version)               |"
	echo "|      f. *Update Jexus v5.5.3 (Mono Web Server)             |"
	echo "|      g. Install Jexus v5.5.3 (Mono Web Server)             |"
	echo "|      h. Install Mysql v5.5 (MariaDB)                       |"
	echo "|      i. Install Haproxy                                    |"
	echo "|      j. Install Redis                                      |"
	echo "|      k. Install Node.js                                    |"
	echo "|      l. Install MQTT Server                                |"
	echo "|      m. Install MongoDB                                    |"
	echo "|      n. Install Nginx                                      |"
	echo "|      o. *Update Mono (After v3.6.0)                        |"
	echo "|      x. Exit                                               |"
	echo "--------------------------------------------------------------"
	echo
	return 0
}

function setupLibs()
{
	sudo apt-get update -y
	sudo apt-get upgrade -y

	echo "Install the public Libs"
	echo "------------------------------------"

	if [ ! -d /wwwroot/htdocs/www ]; then
	  mkdir -pv /wwwroot/htdocs/www
	fi

	if [ ! -d /tmp/downloads ]; then
	  mkdir -pv /tmp/downloads
	fi

	cd /tmp
	sudo apt-get install -y vim chkconfig
	sudo apt-get install -y build-essential
	sudo apt-get install -y automake autoconf
	sudo apt-get install -y bison gettext libtool libglib2.0-dev libfreetype6-dev libfontconfig-dev
	sudo apt-get install -y libgif-dev libtiff4-dev libpng12-dev libexif-dev libx11-dev libxft-dev libjpeg-dev

	cd /tmp/downloads
	wget -c https://github.com/cjy37/linux-asp.net-installScript/raw/master/conf.zip
	if [ -f conf.zip ]; then
			unzip -o conf.zip
	fi

	return 0
}

function updateMono()
{
	echo "Update mono v3.8+"
	cd /tmp
	wget http://download.mono-project.com/repo/xamarin.gpg
	apt-key add xamarin.gpg
	echo "deb http://download.mono-project.com/repo/debian wheezy main" > /etc/apt/sources.list.d/mono-xamarin.list
	sudo apt-get update
	sudo apt-get install -y mono-complete
}

function setupNewMono()
{
	if [ ! -d /wwwroot/htdocs/www ]; then
	  mkdir -pv /wwwroot/htdocs/www
	fi
	if [ ! -d /tmp/downloads ]; then
	  mkdir -pv /tmp/downloads
	fi
	
	echo "Install mono v3.6+"
	echo "------------------------------------"

	sudo apt-get -f remove -y libmono* mono-jay
	sudo apt-get autoremove -y
	sudo rm -rf /etc/apt/sources.list.d/mono-xamarin.list
	sudo apt-get update
	sudo apt-get install -y mono-complete

	cd /tmp
	wget http://download.mono-project.com/repo/xamarin.gpg
	sudo apt-key add xamarin.gpg
	echo "deb http://download.mono-project.com/repo/debian wheezy main" > /etc/apt/sources.list.d/mono-xamarin.list
	sudo apt-get update
	sudo apt-get install -y mono-complete
	
	echo "Install mono completed. info:"
	mono -V
	
	return 0
}


function setupMysql()
{
	if [ ! -d /tmp/downloads ]; then
	  mkdir -pv /tmp/downloads
	fi

	echo "install mysql"
	echo "------------------------------------"

	sudo apt-get install -y python-software-properties
	sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xcbcb082a1bb943db
	sudo add-apt-repository 'deb http://ftp.osuosl.org/pub/mariadb/repo/10.1/ubuntu precise main'
	
	sudo apt-get update -y 
	sudo apt-get install -y mariadb-server mariadb-client libmariadbd*-dev
	
	sudo service mysql start
	mysql -V
	
	return 0
}

function setupHaproxy()
{
	echo "install haproxy"
	echo "------------------------------------"

	sudo apt-get install -y haproxy
	sudo echo "ENABLED=1" > /etc/default/haproxy
	sudo service haproxy start
	
	return 0
}

function setupRedis()
{
	echo "install Redis"
	echo "------------------------------------"

	sudo apt-get install -y redis-server
	sudo service redis-server start
	
	return 0
}

function setupMongoDB()
{
	echo "install MongoDB"
	echo "------------------------------------"

	sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
	echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list
	sudo apt-get update -y
	sudo apt-get install -y mongodb-10gen
	sudo apt-get install -y mongodb-10gen=2.4.6
	echo "mongodb-10gen hold" | sudo dpkg --set-selections
	sudo service mongodb start
}

function setupMQTTServer()
{
	echo "install mosquitto(MQTT Server)"
	echo "------------------------------------"

	sudo apt-add-repository ppa:mosquitto-dev/mosquitto-ppa
	sudo apt-get update -y
	sudo apt-get install -y python-software-properties
	sudo apt-get install -y mosquitto
	sudo cp /etc/mosquitto/mosquitto.conf.example /etc/mosquitto/mosquitto.conf
	echo "Mosquitto config file: /etc/mosquitto/mosquitto.conf"
	sudo service mosquitto start
}

function setupNodeJS()
{
	echo "install Node.js"
	echo "------------------------------------"
	
	if [ ! -d /wwwroot ]; then
	  sudo mkdir -pv /wwwroot
	fi
	
	if [ ! -d /wwwroot/node_mqtt ]; then
	  sudo mkdir -pv /wwwroot/node_mqtt
	fi
	
	sudo apt-get install -y python-software-properties python g++ make
	sudo add-apt-repository ppa:chris-lea/node.js
	sudo apt-get update -y
	sudo apt-get install -y nodejs
	
	cd /wwwroot/node_mqtt
	
	sudo echo "sudo npm install forever|mqtt|websocket|websocket-server|socket.io to '/wwwroot/node_mqtt'"
	
	sudo npm install forever -g
	sudo npm install mqtt -g
	sudo npm install websocket -g
	sudo npm install websocket-server -g
	sudo npm install socket.io@0.9 -g
	sudo npm install log4js -g
	sudo npm install pm2 -g --unsafe-perm
	
	return 0
}

function setupNginx()
{
	sudo apt-add-repository ppa:nginx/development
	sudo apt-get update
	sudo apt-get install nginx
	echo "Nginx config file: /etc/nginx/nginx.conf"
}

function updateJws()
{
	if [ ! -d /wwwroot/htdocs/www ]; then
	  sudo mkdir -pv /wwwroot/htdocs/www
	fi
	if [ ! -d /tmp/downloads ]; then
	  sudo mkdir -pv /tmp/downloads
	fi

	echo "upgrade jexus"
	echo "------------------------------------"

	cd /tmp/downloads
	wget -c http://www.linuxdot.net/down/jexus-5.6.3.tar.gz
	if [ -f jexus-5.6.3.tar.gz ]; then
	  tar -xf jexus-5.6.3.tar.gz
	  cd jexus-5.6.3
	  sudo /usr/jexus/jws stop
      sudo ./upgrade
	  sudo /usr/jexus/jws start
	  sudo /usr/jexus/jws -V
	  echo "Jexus upgrade to path: /usr/jexus/"
	  echo "Jexus config file (/usr/jexus/jws.conf and /usr/jexus/siteconf/*)"
	fi
	return 0
	
}

function setupJws()
{
	if [ ! -d /wwwroot/htdocs/www ]; then
	  sudo mkdir -pv /wwwroot/htdocs/www
	fi
	if [ ! -d /tmp/downloads ]; then
	  sudo mkdir -pv /tmp/downloads
	fi

	echo "install jexus"
	echo "------------------------------------"

	cd /tmp/downloads
	wget -c http://www.linuxdot.net/down/jexus-5.6.3.tar.gz
	if [ -f jexus-5.6.3.tar.gz ]; then
	  tar -xf jexus-5.6.3.tar.gz
	  cd jexus-5.6.3
	  sudo ./install
	  sudo chmod +x /usr/jexus/*

	  sudo sed -i 's/root=\/ \/var\/www\/default/root=\/ \/wwwroot\/htdocs\/www/g' /usr/jexus/siteconf/default

	fi
	
	cd /tmp/downloads
	wget -c https://github.com/cjy37/linux-asp.net-installScript/blob/master/aspx-info.tar.gz?raw=true
	if [ -f aspx-info.tar.gz ]; then
	  tar xvf aspx-info.tar.gz
	  cd aspx-info
	  sudo cp -r -f index.aspx /wwwroot/htdocs/www/index.aspx
	  echo "Web Root Path: /wwwroot/htdocs/www/"
	  echo "If you need change it. Please vim the Jexus config file(/usr/jexus/siteconf/*)"
	fi
	
	sudo /usr/jexus/jws start
	sudo /usr/jexus/jws -V
	echo "Jexus install to path: /usr/jexus/"
	echo "Please vim the Jexus config file (/usr/jexus/jws.conf and /usr/jexus/siteconf/*)"
	  
	return 0
}

function selectCmd()
{
	alias cp='cp'
	showMenu
	echo "Please select a serial number for installation"
	echo "When your manual installation, Please install the [d] first:"
	echo "[f][g] be dependent on [e]:"
	read -n 1 M
	echo

	if [ "$M" = "x" ]; then
		exit 1
	elif [ "$M" = "a" ]; then
		echo "Installing ALL... [d,e,g,h,i,j]"
		echo "------------------------------------"
		setupLibs
		setupNewMono
		setupJws
		setupMysql
		setupHaproxy
		setupRedis
	elif [ "$M" = "b" ]; then
		echo "Installing Web Server ... [d,e,g,i,j]"
		echo "------------------------------------"
		setupLibs
		setupNewMono
		setupJws
		setupHaproxy
		setupRedis
	elif [ "$M" = "c" ]; then
		 echo "Installing MySQL ... [d,h,j]"
		 echo "------------------------------------"
		 setupLibs
		 setupMysql
		 setupRedis
	elif [ "$M" = "d" ]; then
		setupLibs
		read -n 1 -p "Press <Enter> to continue..."
	elif [ "$M" = "e" ]; then
		setupNewMono
		read -n 1 -p "Press <Enter> to continue..."
        elif [ "$M" = "f" ]; then
		updateJws
		read -n 1 -p "Press <Enter> to continue..."
	elif [ "$M" = "g" ]; then
		setupJws
		read -n 1 -p "Press <Enter> to continue..."
	elif [ "$M" = "h" ]; then
		setupMysql
		read -n 1 -p "Press <Enter> to continue..."
	elif [ "$M" = "i" ]; then
		setupHaproxy
		read -n 1 -p "Press <Enter> to continue..."
	elif [ "$M" = "j" ]; then
		setupRedis
		read -n 1 -p "Press <Enter> to continue..."
	elif [ "$M" = "k" ]; then
		setupNodeJS
		read -n 1 -p "Press <Enter> to continue..."
	elif [ "$M" = "l" ]; then
		setupMQTTServer
		read -n 1 -p "Press <Enter> to continue..."
	elif [ "$M" = "m" ]; then
		setupMongoDB
		read -n 1 -p "Press <Enter> to continue..."
	elif [ "$M" = "n" ]; then
		setupNginx
		read -n 1 -p "Press <Enter> to continue..."
	elif [ "$M" = "o" ]; then
		updateMono
		read -n 1 -p "Press <Enter> to continue..."
	else
		echo "Select Error!"
		read -n 1 -p "Press <Enter> to continue..."
	fi

	selectCmd
	return 0
}
cd /tmp
selectCmd
