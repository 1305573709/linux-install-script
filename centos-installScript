#!/bin/sh
#------------------------------------------
#      Centos6 asp.net InstallScript
#      copyright https://github.com/cjy37
#      email: rocky.cn@foxmail.com
#------------------------------------------

function showMenu()
{
	clear
	echo
	echo "--------------------------------------------------------------"
	echo "|      Centos6 Install Helper                                |"
	echo "|      copyright https://github.com/cjy37                    |"
	echo "--------------------------------------------------------------"
	echo "|      a. Install ALL                                        |"
	echo "|      b. Install Web Server (linux mono mysql jexus)[c,d]   |"
	echo "|      c. Install Mono & Jexus (Asp.Net Web Server)          |"
	echo "|      d. Install Mysql (MariaDB-10)                         |"
	echo "|      e. Install Haproxy                                    |"
	echo "|      f. Install Redis                                      |"
	echo "|      g. Install Node.js                                    |"
	echo "|      h. Install MongoDB                                    |"
	echo "|      i. Install Nginx                                      |"
	echo "|      j. Install Memcached                                  |"
	echo "|      k. Install CutyCapt                                   |"
	echo "|      l. Install GtkSharp                                   |"
	echo "|      x. Exit                                               |"
	echo "--------------------------------------------------------------"
	echo
	return 0
}

function selectCmd()
{
	alias cp='cp'
	showMenu
	echo "Please select a serial number for installation [a-x]:"
	read -n 1 M
	echo

	if [ "$M" = "x" ]; then
		exit 1
		
	elif [ "$M" = "a" ]; then
		echo "Installing ALL..."
		echo "------------------------------------"
		setupMono && setupJws && setupMysql && setupHaproxy && setupRedis && setupNodejs && setupMemcached && setupNginx && setupMongodb && setupCutyCapt && setupGtkSharp
		read -n 1 -p "Press <Enter> to continue..."
		
	elif [ "$M" = "b" ]; then
		echo "Installing Web Server ... [c,d]"
		echo "------------------------------------"
		setupMono && setupJws && setupMysql
		read -n 1 -p "Press <Enter> to continue..."
		
	elif [ "$M" = "c" ]; then
		setupMono && setupJws
		read -n 1 -p "Press <Enter> to continue..."

	elif [ "$M" = "d" ]; then
		setupMysql
		read -n 1 -p "Press <Enter> to continue..."

	elif [ "$M" = "e" ]; then
		setupHaproxy
		read -n 1 -p "Press <Enter> to continue..."

	elif [ "$M" = "f" ]; then
		setupRedis
		read -n 1 -p "Press <Enter> to continue..."
		
	elif [ "$M" = "g" ]; then
		setupNodejs
		read -n 1 -p "Press <Enter> to continue..."
		
	elif [ "$M" = "h" ]; then
		setupMongodb
		read -n 1 -p "Press <Enter> to continue..."
		
	elif [ "$M" = "i" ]; then
		setupNginx
		read -n 1 -p "Press <Enter> to continue..."

	elif [ "$M" = "j" ]; then
		setupMemcached
		read -n 1 -p "Press <Enter> to continue..."

	elif [ "$M" = "k" ]; then
		setupCutyCapt
		read -n 1 -p "Press <Enter> to continue..."
	 
	elif [ "$M" = "l" ]; then
		setupGtkSharp
		read -n 1 -p "Press <Enter> to continue..."

	else
		echo "Select Error!"
		read -n 1 -p "Press <Enter> to continue..."
	fi

	selectCmd
	return 0
}

function setupNodejs()
{
	if [ ! -d /wwwroot ]; then
	  sudo mkdir -pv /wwwroot
	  sudo chmod 777 wwwroot/
	fi
	
	if [ ! -d /wwwroot/node_mqtt ]; then
	  mkdir -pv /wwwroot/node_mqtt
	fi
	
	echo "install nodejs"
	echo "------------------------------------"
	yum -y install nodejs npm
	echo "Install nodejs completed. info:"
	node -v
	echo "------------------------------------"
	sudo echo "sudo npm install mqtt|websocket|socket.io|log4js|pm2"

	cd /wwwroot/node_mqtt
	
	sudo npm install mqtt -g
	sudo npm install websocket -g
	sudo npm install websocket-server -g
	sudo npm install socket.io@0.9 -g
	sudo npm install log4js -g
	sudo npm install pm2 -g --unsafe-perm
	
	return $?
}

function setupMongodb()
{
	echo "install mongodb"
	echo "------------------------------------"
	yum -y install mongodb mongodb-server
	echo "Install mongodb completed. info:"
	mongod --version
	echo "------------------------------------"
	return $?
}


function setupOs7Epel()
{
	echo "Install Centos7_64bit EPEL repository"
	rpm -ivh http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-2.noarch.rpm
	rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7
	yum -y install yum-priorities
	
	return $?
}

function setupOs6Epel()
{
	echo "Install Centos6_64bit EPEL repository"
	rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
	rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6
	yum -y install yum-priorities
	
	return $?
}

function setupOs5Epel()
{
	echo "Install Centos5_64bit EPEL repository"
	rpm -ivh http://dl.fedoraproject.org/pub/epel/5/x86_64/epel-release-5-4.noarch.rpm
	rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-5
	yum -y install yum-priorities
	
	return $?
}

function setupLibs()
{
	vers=`cat /etc/redhat-release | awk -F'release' '{print $2}' | awk -F'.' '{print $1}' | awk -F' ' '{print $1}'`
	if [ "$vers" = "7" ]; then
		setupOs7Epel
	elif [ "$vers" = "6" ]; then
		setupOs6Epel
	elif [ "$vers" = "5" ]; then
		setupOs5Epel
	fi

	yum -y update
	yum -y groupinstall "Development Tools"

	echo "Install the public Libs"
	echo "------------------------------------"

	if [ ! -d /usr/local/webserver ]; then
	  mkdir -pv /usr/local/webserver
	fi
	if [ ! -d /wwwroot/htdocs/www ]; then
	  mkdir -pv /wwwroot/htdocs/www
	fi

	if [ ! -d /tmp/downloads ]; then
	  mkdir -pv /tmp/downloads
	fi

	yum -y install gcc gcc-c++ autoconf libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel libidn libidn-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers patch make jpackage-utils build-essential bzip bison pkgconfig glib-devel httpd-devel libX11-devel fontconfig pango-devel ruby ruby-rdoc gtkhtml38-devel wget gettext gcc-g77 automake fiex* libmcrypt* libtool-ltdl-devel* pcre* cmake mhash* libevent libevent-devel gif* libtiff* libjpeg* libpng* libx11* libiconv mcrypt

	cd /tmp/downloads
	wget -c https://github.com/cjy37/linux-asp.net-installScript/raw/master/conf.zip
	if [ -f conf.zip ]; then
			unzip -o conf.zip
	fi

	return $?
}

function setupLibgdiplus()
{
	echo "install libgdiplus"
	echo "------------------------------------"
	cd /tmp/downloads
	wget -c http://download.mono-project.com/sources/libgdiplus/libgdiplus-2.10.9.tar.bz2
	if [ -f libgdiplus-2.10.9.tar.bz2 ]; then
		tar -jxvf libgdiplus-2.10.9.tar.bz2
		cd libgdiplus-2.10.9
		./configure --prefix=/usr && make && make install
	fi
	ldconfig
	ldconfig -p |grep libgdiplus

	return $?
}

function setupMemcached()
{
	echo "install memcached"
	echo "------------------------------------"
	yum -y install memcached*

	return $?
}

function setupMono()
{
	setupLibgdiplus
	
	if [ ! -d /usr/local/webserver ]; then
	  mkdir -pv /usr/local/webserver
	fi
	if [ ! -d /wwwroot/htdocs/www ]; then
	  mkdir -pv /wwwroot/htdocs/www
	fi
	if [ ! -d /tmp/downloads ]; then
	  mkdir -pv /tmp/downloads
	fi
	
	echo "Install mono"
	echo "------------------------------------"

	cd /tmp/downloads
	wget -c https://github.com/cjy37/linux-asp.net-installScript/raw/master/aspx-info.tar.gz
	wget -c http://download.mono-project.com/sources/mono/mono-3.10.0.tar.bz2
	if [ -f mono-3.10.0.tar.bz2 ]; then
	  tar -jvxf mono-3.10.0.tar.bz2
	  cd mono-3.10.0
	  ./configure --prefix=/usr && sed -i 's/#define HAVE_LOCALCHARSET_H 1/#define HAVE_LOCALCHARSET_H 0/g' eglib/config.h && make && make install
	  ldconfig
	fi
	echo "Install mono completed. info:"
	mono -V
	echo "------------------------------------"
	return $?
}

function setupMysql()
{
	echo "install Mysql"
	echo "------------------------------------"
	
	echo '# MariaDB 10.1 CentOS repository list - created 2014-10-17 07:52 UTC
# http://mariadb.org/mariadb/repositories/
[mariadb]
name = MariaDB
baseurl = http://yum.mariadb.org/10.1/centos6-amd64
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/yum.repos.d/MariaDB.repo

	yum -y install MariaDB-server MariaDB-client MariaDB-devel
	cp /usr/share/mysql/my-innodb-heavy-4G.cnf /etc/my.cnf
	#sudo sed -i 's/# generic configuration options/user = mysql/g' /etc/my.cnf
	sudo sed -i '/\[mysqld\]/a user = mysql' /etc/my.cnf
	chkconfig --level 2345 mysql on
	service mysql start
	
	mysql -V
	echo "------------------------------------"
	echo "Mysql: Please Ender user(root) password"
	read -e PWD
	mysqladmin -uroot password "$PWD"
	return $?
}

function setupMosquitto()
{
	echo "install Mosquitto"
	echo "------------------------------------"
	
	vers=`cat /etc/redhat-release | awk -F'release' '{print $2}' | awk -F'.' '{print $1}' | awk -F' ' '{print $1}'`
	if [ "$vers" = "7" ]; then
		echo '[home_oojah_mqtt]
name=mqtt (CentOS_CentOS-7)
type=rpm-md
baseurl=http://download.opensuse.org/repositories/home:/oojah:/mqtt/CentOS_CentOS-7/
gpgcheck=1
gpgkey=http://download.opensuse.org/repositories/home:/oojah:/mqtt/CentOS_CentOS-7/repodata/repomd.xml.key
enabled=1
' > /etc/yum.repos.d/Mosquitto.repo
	elif [ "$vers" = "6" ]; then
		echo '[home_oojah_mqtt]
name=mqtt (CentOS_CentOS-6)
type=rpm-md
baseurl=http://download.opensuse.org/repositories/home:/oojah:/mqtt/CentOS_CentOS-6/
gpgcheck=1
gpgkey=http://download.opensuse.org/repositories/home:/oojah:/mqtt/CentOS_CentOS-6/repodata/repomd.xml.key
enabled=1
' > /etc/yum.repos.d/Mosquitto.repo
	elif [ "$vers" = "5" ]; then
		echo '[home_oojah_mqtt]
name=mqtt (CentOS_CentOS-5)
type=rpm-md
baseurl=http://download.opensuse.org/repositories/home:/oojah:/mqtt/CentOS_CentOS-5/
gpgcheck=1
gpgkey=http://download.opensuse.org/repositories/home:/oojah:/mqtt/CentOS_CentOS-5/repodata/repomd.xml.key
enabled=1
' > /etc/yum.repos.d/Mosquitto.repo
	fi

	yum -y install mosquitto mosquitto-clients libmosquitto1 libmosquitto-devel libmosquittopp1 libmosquittopp-devel python-mosquitto

	mosquitto -h
	echo "------------------------------------"

	return $?
}

function setupNginx()
{

	echo "install nginx"
	echo "------------------------------------"

	echo '[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/centos/$releasever/$basearch/
gpgcheck=0
enabled=1' > /etc/yum.repos.d/nginx.repo
	yum -y install nginx
	chkconfig --level 2345 nginx on
	service nginx start
	nginx -v
	echo "------------------------------------"
	return $?
}

function setupHaproxy()
{
	echo "install haproxy"
	echo "------------------------------------"
	yum -y install haproxy
	echo "Install haproxy completed. info:"
	haproxy -v
	echo "------------------------------------"
	return $?
}

function setupRedis()
{
	echo "install redis"
	echo "------------------------------------"
	yum -y install redis
	echo "Install Redis completed. info:"
	redis-server -v
	echo "------------------------------------"
	return $?
}

function setupJws()
{
	if [ ! -d /wwwroot/htdocs/www ]; then
	  mkdir -pv /wwwroot/htdocs/www
	fi
	if [ ! -d /tmp/downloads ]; then
	  mkdir -pv /tmp/downloads
	fi
	if [ ! -d /usr/jexus ]; then
	  mkdir -pv /usr/jexus
	  echo  "/usr/jexus/jws start" >> /etc/rc.local
	fi

	echo "install jexus"
	echo "------------------------------------"

	cd /tmp/downloads
	wget -c http://www.linuxdot.net/down/jexus-5.6.3.tar.gz
	if [ -f jexus-5.6.3.tar.gz ]; then
	  tar -xf jexus-5.6.3.tar.gz
	  cd jexus-5.6.3
	  ./install
	  chmod +x /usr/jexus/*
	  
	  sed -i 's/root=\/ \/var\/www\/default/root=\/ \/wwwroot\/htdocs\/www/g' /usr/jexus/siteconf/default

	fi
	
	cd /tmp/downloads
	wget -c https://github.com/cjy37/linux-asp.net-installScript/blob/master/aspx-info.tar.gz?raw=true
	if [ -f aspx-info.tar.gz ]; then
	  tar xvf aspx-info.tar.gz
	  cd aspx-info
	  cp -r -f index.aspx /wwwroot/htdocs/www/index.aspx
	  echo "Web Root Path: /wwwroot/htdocs/www/"
	  echo "If you need change it. Please vim the Jexus config file(/usr/jexus/siteconf/*)"
	fi
	
	/usr/jexus/jws start
	/usr/jexus/jws -V
	echo "------------------------------------"
	echo "Jexus install to path: /usr/jexus/"
	echo "Please vim the Jexus config file (/usr/jexus/jws.conf and /usr/jexus/siteconf/*)"
	  
	return $?
}

function setupGtkSharp()
{
	cd /tmp/downloads
	#=========================================================
	echo "/opt/gtk/lib" > /etc/ld.so.conf.d/gtk.conf
	export LD_LIBRARY_PATH=/opt/gtk/lib:$LD_LIBRARY_PATH
	export PKG_CONFIG_PATH=/usr/lib/pkgconfig
	export PKG_CONFIG_PATH=/opt/gtk/lib/pkgconfig:$PKG_CONFIG_PATH
	ldconfig
	#=========================================================
	wget https://github.com/cjy37/linux-asp.net-installScript/raw/master/glib-2.13.7.tar.bz2
	tar xvfj  glib-2.13.7.tar.bz2
	cd glib-2.13.7
	./configure --prefix=/usr --with-libiconv=gnu && make && make install
	ldconfig
	cd ..

	wget https://github.com/cjy37/linux-asp.net-installScript/raw/master/atk-1.19.6.tar.bz2
	tar xvfj atk-1.19.6.tar.bz2
	cd atk-1.19.6
	./configure --prefix=/usr && make && make install
	cd ..

	wget https://github.com/cjy37/linux-asp.net-installScript/raw/master/pixman-0.22.2.tar.gz
	tar xvfz pixman-0.22.2.tar.gz
	cd pixman-0.22.2
	./configure --prefix=/usr && make && make install
	cd ..

	wget https://github.com/cjy37/linux-asp.net-installScript/raw/master/cairo-1.8.10.tar.gz
	tar xvfz cairo-1.8.10.tar.gz
	cd cairo-1.8.10
	./configure --prefix=/usr && make && make install
	cd ..

	wget https://github.com/cjy37/linux-asp.net-installScript/raw/master/pango-1.17.3.tar.bz2
	tar xvfj pango-1.17.3.tar.bz2
	cd pango-1.17.3
	./configure --prefix=/usr && make && make install
	ldconfig
	cd ..

	wget https://github.com/cjy37/linux-asp.net-installScript/raw/master/gtk+-2.12.0.tar.bz2
	tar xvfj gtk+-2.12.0.tar.bz2
	cd gtk+-2.12.0
	./configure --prefix=/usr --with-x --without-libjasper && make && make install
	ldconfig
	cd ..

	wget https://github.com/cjy37/linux-asp.net-installScript/raw/master/gtk-sharp-2.12.11.tar.bz2
	tar xvfj gtk-sharp-2.12.11.tar.bz2
	cd gtk-sharp-2.12.11
	./configure --prefix=/usr && make && make install
	cd ..

	return $?
}

function setupCutyCapt()
{
	cd /tmp
	wget http://ftp.riken.go.jp/Linux/atrpms/el5-i386/atrpms/testing/qt44-4.4.3-10_4.el5.i386.rpm
	wget http://ftp.riken.go.jp/Linux/atrpms/el5-i386/atrpms/testing/qt44-x11-4.4.3-10_4.el5.i386.rpm
	wget http://ftp.riken.go.jp/Linux/atrpms/el5-i386/atrpms/testing/qt44-devel-4.4.3-10_4.el5.i386.rpm

	yum -y install libmng libXi-devel libXinerama-devel libGLU-devel libICE-devel libSM-devel libXcursor-devel libXfixes-devel libXrandr-devel libXt-devel

	rpm -ivh qt44-4.4.3-10* qt44-x11-4.4.3-10* qt44-devel-4.4.3-10*

	ldconfig
	echo "export QTDIR=/usr/lib/qt44" >> /etc/profile
	echo "export QTLIB=/usr/lib/qt44/lib" >> /etc/profile
	echo "export QTINC=/usr/lib/qt44/include" >> /etc/profile
	echo "export LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH" >> /etc/profile
	echo "export PATH=$QTDIR/bin:$PATH" >> /etc/profile
	source /etc/profile

	svn co https://cutycapt.svn.sourceforge.net/svnroot/cutycapt
	mv cutycapt/CutyCapt /usr/local/CutyCapt
	cd /usr/local/CutyCapt
	/usr/lib/qt44/bin/qmake
	make

	wget http://www.flexthinker.com/wp-content/uploads/2009/11/xvfb-run.sh.txt
	mv ./xvfb-run.sh.txt /usr/local/CutyCapt/xvfb-run.sh
	chmod u+x /usr/local/CutyCapt/xvfb-run.sh

	yum install fonts-chinese

	#/usr/local/CutyCapt/xvfb-run.sh --server-args="-screen 0, 1024x768x24" /usr/local/CutyCapt/CutyCapt --url=http://www.163.com --out=163.jpg

	return $?
}

cd /tmp

read -n 1 -p "Press [Any Key] to setup public libs. [Ctrl + C] to Cancel."
setupLibs
selectCmd
